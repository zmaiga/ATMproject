<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="ATM_testing-2025-04-30" climode="true" endTime="2025-04-30T09:16:18+02:00" execEnv="linux_x86_64" hasViols="true" id="1747014102116" lang="en_US" machine="Ubuntu2204" prjModule="ATMproject" project="ATM_testing" scBranch="feature_branch_1" tag="feature_branch_1-linux_x86_64" time="2025-04-30T09:16:12+02:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.1" user="support">
   <TestConfig machine="Ubuntu2204" name="MISRA C++ 2023" pseudoUrl="builtin://MISRA C++ 2023" user="support"/>
   <Authors>
      <Author id="dev1" name="zak"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20250223B2561"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20250223B2561"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20250223B2561"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Scope>
      <Repositories>
         <Rep repRef="1" type="git" url="https://github.com/andrey-madan/ATMproject.git"/>
      </Repositories>
      <Locations>
         <Loc auth="support" branch="feature_branch_1" hash="-1109400981" locRef="1" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="src/Account.cxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="src/Account.cxx" totLns="69" uri="file:/home/support/ct_work/ATMproject/src/Account.cxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="-1796775297" locRef="2" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="src/ATM.cxx" rev="3282599353857924489226f46091637d43a9ade6" scPath="src/ATM.cxx" totLns="68" uri="file:/home/support/ct_work/ATMproject/src/ATM.cxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="1497090602" locRef="3" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="src/Bank.cxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="src/Bank.cxx" totLns="41" uri="file:/home/support/ct_work/ATMproject/src/Bank.cxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="-812920828" locRef="4" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="src/BaseDisplay.cxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="src/BaseDisplay.cxx" totLns="43" uri="file:/home/support/ct_work/ATMproject/src/BaseDisplay.cxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="14023177" locRef="5" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="include/BaseDisplay.hxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="include/BaseDisplay.hxx" totLns="25" uri="file:/home/support/ct_work/ATMproject/include/BaseDisplay.hxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="-1172569836" locRef="6" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="include/Account.hxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="include/Account.hxx" totLns="78" uri="file:/home/support/ct_work/ATMproject/include/Account.hxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="365519495" locRef="7" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="include/Bank.hxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="include/Bank.hxx" totLns="26" uri="file:/home/support/ct_work/ATMproject/include/Bank.hxx"/>
         <Loc auth="support" branch="feature_branch_1" hash="1586671268" locRef="8" projId="ATMproject" projPath="/ATMproject" project="ATMproject" repRef="1" resProjPath="include/ATM.hxx" rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" scPath="include/ATM.hxx" totLns="42" uri="file:/home/support/ct_work/ATMproject/include/ATM.hxx"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:04">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="8" checkedLns="392" id="ATMproject" name="ATMproject" qfixErrs="0" suppErrs="1" totErrs="53" totFiles="8" totLns="392"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="MISRA C++ 2023" name="MISRACPP2023" rules="273" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRACPP2023-4_1_3" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1.2 (Advisory) Deprecated features should not be used" name="MISRACPP2023-4_1_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.1 (Advisory) The goto statement should not be used" name="MISRACPP2023-9_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.3 (Required) The goto statement shall jump to a label declared later in the function body" name="MISRACPP2023-9_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.3.1 (Required) Predicates shall not have persistent side effects" name="MISRACPP2023-28_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.2 (Required) A goto statement shall reference a label in a surrounding block" name="MISRACPP2023-9_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.5 (Required) A function with non-void return type shall return a value on all paths" name="MISRACPP2023-9_6_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.10.1 (Required) User-defined identifiers shall have an appropriate form" name="MISRACPP2023-5_10_1" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.6.4 (Required) A function declared with the [[noreturn]] attribute shall not return" name="MISRACPP2023-9_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.2.3 (Advisory) Types with limited visibility should be used at least once" name="MISRACPP2023-0_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.2.4 (Advisory) Functions with limited visibility should be used at least once" name="MISRACPP2023-0_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4.1 (Required) The literal value zero shall be the only value assigned to errno" name="MISRACPP2023-22_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2.1 (Required) An explicit type conversion shall not be an expression statement" name="MISRACPP2023-9_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3.2 (Advisory) The declaration of an object should contain no more than two levels of pointer indirection" name="MISRACPP2023-11_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3.1 (Advisory) Variables of array type should not be declared" name="MISRACPP2023-11_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.2.1 (Advisory) Variables with limited visibility should be used at least once" name="MISRACPP2023-0_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.2 (Required) An exception of class type shall be caught by const reference or reference" name="MISRACPP2023-18_3_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 0.2.2 (Required) A named function parameter shall be used at least once" name="MISRACPP2023-0_2_2" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.1 (Advisory) There should be at least one exception handler to catch all otherwise unhandled exceptions" name="MISRACPP2023-18_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3.3 (Required) Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases" name="MISRACPP2023-18_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1.2 (Required) The volatile qualifier shall be used appropriately" name="MISRACPP2023-10_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.3 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation" name="MISRACPP2023-19_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.20.1 (Advisory) An unsigned arithmetic operation with constant operands should not wrap" name="MISRACPP2023-8_20_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1.1 (Advisory) The target type of a pointer or lvalue reference parameter should be const-qualified appropriately" name="MISRACPP2023-10_1_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.2 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRACPP2023-19_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1.1 (Required) The defined preprocessor operator shall be used appropriately" name="MISRACPP2023-19_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.0.1 (Advisory) Parentheses should be used to make the meaning of an expression appropriately explicit" name="MISRACPP2023-8_0_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 30.0.2 (Required) Reads and writes on the same file stream shall be separated by a positioning operation" name="MISRACPP2023-30_0_2" rules="1" total="0"/>
               <Category authTot="10;" authUrg="10;" desc="Rule 6.9.2 (Advisory) The names of the standard signed integer types and standard unsigned integer types should not be used" name="MISRACPP2023-6_9_2" rules="1" total="10"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.9.1 (Required) The same type aliases shall be used in all declarations of the same entity" name="MISRACPP2023-6_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.5.2 (Advisory) Internal linkage should be specified appropriately" name="MISRACPP2023-6_5_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Dir 5.7.2 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRACPP2023-5_7_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.5.1 (Advisory) A function or object with external linkage should be introduced in a header file" name="MISRACPP2023-6_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7.1 (Required) The character sequence /* shall not be used within a C-style comment" name="MISRACPP2023-5_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7.3 (Required) Line-splicing shall not be used in // comments" name="MISRACPP2023-5_7_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 30.0.1 (Required) The C Library input/output functions shall not be used" name="MISRACPP2023-30_0_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.11 (Required) An argument passed via ellipsis shall have an appropriate type" name="MISRACPP2023-8_2_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.10 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRACPP2023-8_2_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.1 (Required) The features of &lt;cstdarg> shall not be used" name="MISRACPP2023-21_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.1 (Required) The argument to std::move shall be a non-const lvalue" name="MISRACPP2023-28_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.2 (Required) The standard header file &lt;csetjmp> shall not be used" name="MISRACPP2023-21_10_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.2 (Required) Forwarding references and std::forward shall be used together" name="MISRACPP2023-28_6_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5.2 (Required) A for-range-initializer shall contain at most one function call" name="MISRACPP2023-9_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.18.1 (Mandatory) An object or subobject must not be copied to an overlapping object" name="MISRACPP2023-8_18_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5.1 (Advisory) Legacy for statements should be simple" name="MISRACPP2023-9_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.5 (Required) A class shall only define an initializer-list constructor when it is the only constructor" name="MISRACPP2023-15_1_5" rules="1" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="Rule 15.1.4 (Advisory) All direct, non-static data members of a class should be initialized before the class object is accessible" name="MISRACPP2023-15_1_4" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.6.1 (Required) Operations on a memory location shall be sequenced appropriately" name="MISRACPP2023-4_6_1" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.3 (Required) Conversion operators and constructors that are callable with a single argument shall be explicit" name="MISRACPP2023-15_1_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10.3 (Required) The facilities provided by the standard header file &lt;csignal> shall not be used" name="MISRACPP2023-21_10_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.2 (Advisory) All constructors of a class should explicitly initialize all of its virtual base classes and immediate base classes" name="MISRACPP2023-15_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14.1 (Advisory) The right-hand operand of a logical &amp;&amp; or || operator should not contain persistent side effects" name="MISRACPP2023-8_14_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 24.5.2 (Required) The C++ Standard Library functions memcpy, memmove and memcmp from &lt;cstring> shall not be used" name="MISRACPP2023-24_5_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 8.18.2 (Advisory) The result of an assignment operator should not be used" name="MISRACPP2023-8_18_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.3 (Required) An object shall not be used while in a potentially moved-from state" name="MISRACPP2023-28_6_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 24.5.1 (Required) The character handling functions from &lt;cctype> and &lt;cwctype> shall not be used" name="MISRACPP2023-24_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 28.6.4 (Required) The result of std::remove, std::remove_if, std::unique and empty shall be used" name="MISRACPP2023-28_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7.1 (Required) Pointer arithmetic shall not form an invalid pointer" name="MISRACPP2023-8_7_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3.2 (Advisory) The built-in unary + operator should not be used" name="MISRACPP2023-8_3_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="Rule 0.1.2 (Required) The value returned by a function shall be used" name="MISRACPP2023-0_1_2" rules="1" total="2"/>
               <Category authTot="2;" authUrg="2;" desc="Rule 18.4.1 (Required) Exception-unfriendly functions shall be noexcept" name="MISRACPP2023-18_4_1" rules="3" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.1.1 (Advisory) A value should not be unnecessarily written to a local object" name="MISRACPP2023-0_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.6.1 (Advisory) The #pragma directive and the _Pragma operator should not be used" name="MISRACPP2023-19_6_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRACPP2023-8_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1.1 (Required) An object's dynamic type shall not be used from within its constructor or destructor" name="MISRACPP2023-15_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.3 (Required) The ' or &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRACPP2023-19_2_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 10.2.1 (Required) An enumeration shall be defined with an explicit underlying type" name="MISRACPP2023-10_2_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.2 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRACPP2023-19_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2.1 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRACPP2023-19_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2.3 (Required) The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" name="MISRACPP2023-10_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3.1 (Advisory) The built-in unary - operator should not be applied to an expression of unsigned type" name="MISRACPP2023-8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2.2 (Advisory) Unscoped enumerations should not be declared" name="MISRACPP2023-10_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3.1 (Required) The union keyword shall not be used" name="MISRACPP2023-12_3_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 21.6.2 (Required) Dynamic memory shall be managed automatically" name="MISRACPP2023-21_6_2" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.3 (Required) Advanced memory management shall not be used" name="MISRACPP2023-21_6_3" rules="4" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 7.0.6 (Required) Assignment between numeric types shall be appropriate" name="MISRACPP2023-7_0_6" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.4 (Required) If a project defines either a sized or unsized version of a global operator delete, then both shall be defined" name="MISRACPP2023-21_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.6.5 (Required) A pointer to an incomplete class type shall not be deleted" name="MISRACPP2023-21_6_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.3 (Required) The numerical value of a character shall not be used" name="MISRACPP2023-7_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.2 (Required) There shall be no conversion to type bool" name="MISRACPP2023-7_0_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 7.0.5 (Required) Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" name="MISRACPP2023-7_0_5" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.4 (Required) The operands of bitwise operators and shift operators shall be appropriate" name="MISRACPP2023-7_0_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.0.1 (Required) There shall be no conversion from type bool" name="MISRACPP2023-7_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.0.1 (Advisory) Trigraph-like sequences should not be used" name="MISRACPP2023-5_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1.2 (Required) An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="MISRACPP2023-13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1.1 (Advisory) Classes should not be inherited virtually" name="MISRACPP2023-13_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.1 (Required) The library functions atof, atoi, atol and atoll from &lt;cstdlib> shall not be used" name="MISRACPP2023-21_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.4 (Required) A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" name="MISRACPP2023-6_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.3 (Required) The source code used to implement an entity shall appear only once" name="MISRACPP2023-6_2_3" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.2 (Required) All declarations of a variable or function shall have the same type" name="MISRACPP2023-6_2_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 21.6.1 (Advisory) Dynamic memory should not be used" name="MISRACPP2023-21_6_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2.1 (Required) The one-definition rule shall not be violated" name="MISRACPP2023-6_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.4 (Required) The macro offsetof shall not be used" name="MISRACPP2023-21_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.3 (Required) The library function system from &lt;cstdlib> shall not be used" name="MISRACPP2023-21_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2.2 (Required) The string handling functions from &lt;cstring>, &lt;cstdlib>, &lt;cwchar> and &lt;cinttypes> shall not be used" name="MISRACPP2023-21_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4.1 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRACPP2023-9_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 15.8.1 (Required) User-provided copy assignment operators and move assignment operators shall handle self-assignment" name="MISRACPP2023-15_8_1" rules="2" total="0"/>
               <Category authTot="3;" authUrg="2;" desc="Rule 9.4.2 (Required) The structure of a switch statement shall be appropriate" name="MISRACPP2023-9_4_2" rules="7" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.19.1 (Advisory) The comma operator should not be used" name="MISRACPP2023-8_19_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.6 (Required) An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type" name="MISRACPP2023-8_2_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.5 (Required) reinterpret_cast shall not be used" name="MISRACPP2023-8_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1.2 (Required) An empty throw shall only occur within the compound-statement of a catch handler" name="MISRACPP2023-18_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.4 (Required) Casts shall not be performed between a pointer to function and any other type" name="MISRACPP2023-8_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1.1 (Required) An exception object shall not have pointer type" name="MISRACPP2023-18_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.3 (Required) A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference" name="MISRACPP2023-8_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.9 (Required) The operand to typeid shall not be an expression of polymorphic class type" name="MISRACPP2023-8_2_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 0.0.1 (Required) A function shall not contain unreachable statements" name="MISRACPP2023-0_0_1" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5.2 (Advisory) Program-terminating functions should not be used" name="MISRACPP2023-18_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.5 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRACPP2023-19_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.8 (Required) An object pointer type shall not be cast to an integral type other than std::uintptr_t or std::intptr_t" name="MISRACPP2023-8_2_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 0.0.2 (Advisory) Controlling expressions should not be invariant" name="MISRACPP2023-0_0_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5.1 (Advisory) A noexcept function should not attempt to propagate an exception to the calling function" name="MISRACPP2023-18_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.4 (Required) Parentheses shall be used to ensure macro arguments are expanded appropriately" name="MISRACPP2023-19_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.7 (Advisory) A cast should not convert a pointer type to an integral type" name="MISRACPP2023-8_2_7" rules="2" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="Rule 15.0.2 (Advisory) User-provided copy and move member functions of a class should have appropriate signatures" name="MISRACPP2023-15_0_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.3 (Required) The argument to a mixed-use macro parameter shall not be subject to further expansion" name="MISRACPP2023-19_3_3" rules="1" total="0"/>
               <Category authTot="7;" authUrg="7;" desc="Rule 15.0.1 (Required) Special member functions shall be provided appropriately" name="MISRACPP2023-15_0_1" rules="2" total="7"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.2 (Required) A macro parameter immediately following a # operator shall not be immediately followed by a ## operator" name="MISRACPP2023-19_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.3.1 (Advisory) The # and ## preprocessor operators should not be used" name="MISRACPP2023-19_3_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 8.2.2 (Required) C-style casts and functional notation casts shall not be used" name="MISRACPP2023-8_2_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3.1 (Advisory) There should be no unnamed namespaces in header files" name="MISRACPP2023-10_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2.1 (Required) A virtual base class shall only be cast to a derived class by means of dynamic_cast" name="MISRACPP2023-8_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.1 (Advisory) Bit-fields should not be declared" name="MISRACPP2023-12_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.3 (Required) A named bit-field with signed integer type shall not have a length of one bit" name="MISRACPP2023-12_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2.2 (Required) A bit-field shall have an appropriate type" name="MISRACPP2023-12_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5.2 (Required) The address-of operator shall not be overloaded" name="MISRACPP2023-16_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5.1 (Required) The logical AND and logical OR operators shall not be overloaded" name="MISRACPP2023-16_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.7.2 (Required) Global variables shall not be used" name="MISRACPP2023-6_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.7.1 (Required) Local variables shall not have static storage duration" name="MISRACPP2023-6_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 23.11.1 (Advisory) The raw pointer constructors of std::shared_ptr and std::unique_ptr should not be used" name="MISRACPP2023-23_11_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.1 (Required) Within character literals and non raw-string literals, \ shall only be used to form a defined escape sequence or universal character name" name="MISRACPP2023-5_13_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="Rule 9.3.1 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRACPP2023-9_3_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.3 (Required) Octal constants shall not be used" name="MISRACPP2023-5_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.2 (Required) Octal escape sequences, hexadecimal escape sequences and universal character names shall be terminated" name="MISRACPP2023-5_13_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1.1 (Advisory) Non-static data members should be either all private or all public" name="MISRACPP2023-14_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 0.3.2 (Required) A function call shall not violate the function's preconditions" name="MISRACPP2023-0_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.5 (Required) The lowercase form of &quot;L&quot; shall not be used as the first character in a literal suffix" name="MISRACPP2023-5_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6.3 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRACPP2023-11_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.4 (Required) Unsigned integer literals shall be appropriately suffixed" name="MISRACPP2023-5_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6.2 (Mandatory) The value of an object must not be read before it has been set" name="MISRACPP2023-11_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.7 (Required) String literals with different encoding prefixes shall not be concatenated" name="MISRACPP2023-5_13_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6.1 (Advisory) All variables should be initialized" name="MISRACPP2023-11_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3.1 (Required) The assert macro shall not be used with a constant-expression" name="MISRACPP2023-22_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.13.6 (Required) An integer-literal of type long long shall not use a single L or l in any suffix" name="MISRACPP2023-5_13_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 0.3.1 (Advisory) Floating-point arithmetic should be used appropriately" name="MISRACPP2023-0_3_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9.1 (Required) The built-in relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type, except where they point to elements of the same array" name="MISRACPP2023-8_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.0.1 (Advisory) A declaration should not declare more than one variable or member variable" name="MISRACPP2023-10_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.4 (Advisory) #undef should only be used for macros defined previously in the same file" name="MISRACPP2023-19_0_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.3 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRACPP2023-19_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4.1 (Required) The asm declaration shall not be used" name="MISRACPP2023-10_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.2 (Required) Function-like macros shall not be defined" name="MISRACPP2023-19_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.0.1 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRACPP2023-19_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1.2 (Advisory) Variables should be captured explicitly in a non-transient lambda" name="MISRACPP2023-8_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1.1 (Required) A non-transient lambda shall not implicitly capture this" name="MISRACPP2023-8_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.4 (Required) A comparison of a potentially virtual pointer to member function shall only be with nullptr" name="MISRACPP2023-13_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.3 (Required) The parameters in all declarations or overrides of a function shall either be unnamed or have identical names" name="MISRACPP2023-13_3_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.2 (Required) Parameters in an overriding virtual function shall not specify different default arguments" name="MISRACPP2023-13_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8.1 (Required) Function templates shall not be explicitly specialized" name="MISRACPP2023-17_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 26.3.1 (Advisory) std::vector should not be specialized with bool" name="MISRACPP2023-26_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.11.3 (Required) A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" name="MISRACPP2023-7_11_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.11.2 (Required) An array passed as a function argument shall not decay to a pointer" name="MISRACPP2023-7_11_2" rules="2" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="Rule 7.11.1 (Required) nullptr shall be the only form of the null-pointer-constant" name="MISRACPP2023-7_11_1" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6.1 (Advisory) Symmetrical operators should only be implemented as non-member functions" name="MISRACPP2023-16_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.4 (Advisory) Member functions returning references to their object should be ref-qualified appropriately" name="MISRACPP2023-6_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.3 (Required) An assignment operator shall not assign the address of an object with automatic storage duration to an object with a greater lifetime" name="MISRACPP2023-6_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3.1 (Required) User-declared member functions shall use the virtual, override and final specifiers appropriately" name="MISRACPP2023-13_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.2 (Mandatory) A function must not return a reference or a pointer to a local variable with automatic storage duration" name="MISRACPP2023-6_8_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.8.1 (Required) An object shall not be accessed outside of its lifetime" name="MISRACPP2023-6_8_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.3 (Required) A name that is present in a dependent base shall not be resolved by unqualified lookup" name="MISRACPP2023-6_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.3 (Mandatory) The pointer returned by the C++ Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror must not be used following a subsequent call to the same function" name="MISRACPP2023-25_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.2 (Required) Derived classes shall not conceal functions that are inherited from their bases" name="MISRACPP2023-6_4_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.4.1 (Required) A variable declared in an inner scope shall not hide a variable declared in an outer scope" name="MISRACPP2023-6_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.4 (Required) The identifier main shall not be used for a function other than the global function main" name="MISRACPP2023-6_0_4" rules="1" total="0"/>
               <Category authTot="12;" authUrg="11;" desc="Rule 6.0.3 (Advisory) The only declarations in the global namespace should be main, namespace declarations and extern &quot;C&quot; declarations" name="MISRACPP2023-6_0_3" rules="1" total="12"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.2 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRACPP2023-6_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.0.1 (Required) Block scope declarations shall not be visually ambiguous" name="MISRACPP2023-6_0_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.1 (Required) The setlocale and std::locale::global functions shall not be called" name="MISRACPP2023-25_5_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 25.5.2 (Mandatory) The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type" name="MISRACPP2023-25_5_2" rules="3" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRACPP2023-0_0_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRACPP2023-0_0_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRACPP2023-0_0_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in switch statement" id="MISRACPP2023-0_0_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in 'for' loop" id="MISRACPP2023-0_0_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRACPP2023-0_0_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRACPP2023-0_0_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRACPP2023-0_0_1-h" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="MISRACPP2023-0_0_1-i" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_0_1" desc="A 'try' statement of a 'try-block' should contain a potentially-throwing statement" id="MISRACPP2023-0_0_1-j" origId="EXCEPT-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRACPP2023-0_0_2" desc="Avoid conditions that always evaluate to the same value" id="MISRACPP2023-0_0_2-a" origId="BD-PB-CC" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_1_1" desc="Avoid unused values" id="MISRACPP2023-0_1_1-a" origId="BD-PB-VOVR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRACPP2023-0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRACPP2023-0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_1" desc="A project should not contain unused local variables" id="MISRACPP2023-0_2_1-a" origId="OPT-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_1" desc="A project should not contain unused variables with internal linkage" id="MISRACPP2023-0_2_1-b" origId="OPT-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_2" desc="Eliminate unused parameters" id="MISRACPP2023-0_2_2-a" origId="OPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-0_2_2" desc="There shall be no unused named parameters in virtual functions" id="MISRACPP2023-0_2_2-b" origId="OPT-42" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_3" desc="Types declared in an unnamed namespace scope should be used at least once" id="MISRACPP2023-0_2_3-a" origId="OPT-46" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_3" desc="Types declared in a block scope should be used at least once" id="MISRACPP2023-0_2_3-b" origId="OPT-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_2_4" desc="Avoid unreachable methods" id="MISRACPP2023-0_2_4-a" origId="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use object representations to compare floating-point values" id="MISRACPP2023-0_3_1-a" origId="CODSTA-190" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRACPP2023-0_3_1-b" origId="CODSTA-225" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use floating point variables as loop counters" id="MISRACPP2023-0_3_1-c" origId="MISRA-065" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_1" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRACPP2023-0_3_1-d" origId="BD-PB-NANINF" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-0_3_2" desc="Do not pass incorrect values to library functions" id="MISRACPP2023-0_3_2-a" origId="BD-API-BADPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_0_1" desc="Each variable should be declared in a separate declaration statement" id="MISRACPP2023-10_0_1-a" origId="FORMAT-33" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_1" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-a" origId="MISRA2004-16_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_1" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_1" desc="Declare reference parameters as const references whenever possible" id="MISRACPP2023-10_1_1-c" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_1_2" desc="The volatile qualifier shall be used appropriately" id="MISRACPP2023-10_1_2-a" origId="CODSTA-306" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-10_2_1" desc="An enumeration shall be defined with an explicit underlying type" id="MISRACPP2023-10_2_1-a" origId="CODSTA-CPP-202" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_1" desc="An explicit or implicit enumerator value shall not be the result of a narrowing conversion" id="MISRACPP2023-10_2_1-b" origId="CODSTA-CPP-203" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_2" desc="Unscoped enumerations should not be declared" id="MISRACPP2023-10_2_2-a" origId="CODSTA-MCPP-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_2_3" desc="The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" id="MISRACPP2023-10_2_3-a" origId="CODSTA-313" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_3_1" desc="There shall be no unnamed namespaces in header files" id="MISRACPP2023-10_3_1-a" origId="CODSTA-CPP-74" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-10_4_1" desc="The 'asm' declaration should not be used" id="MISRACPP2023-10_4_1-a" origId="CODSTA-234" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_3_1" desc="C-style arrays shall not be used" id="MISRACPP2023-11_3_1-a" origId="STL-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_3_2" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRACPP2023-11_3_2-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_6_1" desc="All non-class variables with automatic storage duration should be explicitly initialized" id="MISRACPP2023-11_6_1-a" origId="INIT-101" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_6_2" desc="Avoid use before initialization" id="MISRACPP2023-11_6_2-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-11_6_3" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRACPP2023-11_6_3-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_1" desc="Do not declare member variables as bit-fields" id="MISRACPP2023-12_2_1-a" origId="CODSTA-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_2" desc="A bit-field shall have an appropriate type" id="MISRACPP2023-12_2_2-a" origId="CODSTA-304" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_2" desc="All enumeration values should be representable within the width of the bit-field" id="MISRACPP2023-12_2_2-b" origId="CODSTA-305" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_2_3" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRACPP2023-12_2_3-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-12_3_1" desc="The union keyword should not be used" id="MISRACPP2023-12_3_1-a" origId="CODSTA-111" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_1_1" desc="Classes should not be derived from virtual bases" id="MISRACPP2023-13_1_1-a" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_1_2" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRACPP2023-13_1_2-a" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="MISRACPP2023-13_3_1-a" origId="CODSTA-MCPP-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="MISRACPP2023-13_3_1-b" origId="CODSTA-MCPP-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_2" desc="Parameters in an overriding virtual function shall not specify different default arguments" id="MISRACPP2023-13_3_2-a" origId="CODSTA-CPP-210" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRACPP2023-13_3_3-a" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_3" desc="The parameters in all overrides of a function should either be unnamed or have identical names" id="MISRACPP2023-13_3_3-b" origId="NAMING-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-13_3_4" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="MISRACPP2023-13_3_4-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-14_1_1" desc="Non-static data members should be either all private or all public" id="MISRACPP2023-14_1_1-a" origId="CODSTA-CPP-201" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="5;" cat="MISRACPP2023-15_0_1" desc="Special member functions shall be provided appropriately" id="MISRACPP2023-15_0_1-a" origId="CODSTA-MCPP-105" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRACPP2023-15_0_1" desc="Destructor shall have a non-empty body" id="MISRACPP2023-15_0_1-b" origId="OPT-48" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRACPP2023-15_0_2" desc="User-provided copy and move member functions of a class should have appropriate signatures" id="MISRACPP2023-15_0_2-a" origId="CODSTA-CPP-205" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under construction" id="MISRACPP2023-15_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under destruction" id="MISRACPP2023-15_1_1-b" origId="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_2" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRACPP2023-15_1_2-a" origId="PB-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_3" desc="Constructors allowing for conversion should be made explicit" id="MISRACPP2023-15_1_3-a" origId="CODSTA-CPP-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_3" desc="User-conversion cast operators should be made explicit" id="MISRACPP2023-15_1_3-b" origId="CODSTA-MCPP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of a non-aggregate class should be initialized at the top of a constructor body" id="MISRACPP2023-15_1_4-a" origId="INIT-19" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of an aggregate class should be initialized as soon as the object is created" id="MISRACPP2023-15_1_4-b" origId="INIT-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_1_5" desc="A class shall only define an initializer-list constructor when it is the only constructor" id="MISRACPP2023-15_1_5-a" origId="CODSTA-MCPP-47_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_8_1" desc="User-provided copy assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-a" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-15_8_1" desc="User-provided move assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-b" origId="OOP-34_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_5_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="MISRACPP2023-16_5_1-a" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_5_2" desc="The unary &amp; operator shall not be overloaded" id="MISRACPP2023-16_5_2-a" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-16_6_1" desc="Symmetrical operators should only be implemented as non-member functions" id="MISRACPP2023-16_6_1-a" origId="CODSTA-CPP-20_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-17_8_1" desc="Function templates shall not be explicitly specialized" id="MISRACPP2023-17_8_1-a" origId="TEMPL-09_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_1_1" desc="An exception object should not have pointer type" id="MISRACPP2023-18_1_1-a" origId="EXCEPT-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_1_2" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="MISRACPP2023-18_1_2-a" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_1" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRACPP2023-18_3_1-a" origId="EXCEPT-06" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_2" desc="A class type exception shall always be caught by reference" id="MISRACPP2023-18_3_2-a" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="MISRACPP2023-18_3_3-a" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRACPP2023-18_4_1" desc="Exception-unfriendly functions shall be noexcept" id="MISRACPP2023-18_4_1-a" origId="CODSTA-CPP-208" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_4_1" desc="Functions used as initializers of non-constexpr, non-local variables shall be noexcept" id="MISRACPP2023-18_4_1-b" origId="CODSTA-CPP-209" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_4_1" desc="Pass only 'noexcept' functions to exception-unfriendly functions" id="MISRACPP2023-18_4_1-c" origId="CODSTA-CPP-213" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_1" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRACPP2023-18_5_1-a" origId="BD-PB-NOEXCEPT" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-a" origId="PB-75" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-b" origId="PB-75_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-c" origId="PB-75_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-18_5_2" desc="The 'terminate' function should not be used" id="MISRACPP2023-18_5_2-d" origId="PB-75_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_1" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRACPP2023-19_0_1-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_2" desc="Function-like macros shall not be defined" id="MISRACPP2023-19_0_2-a" origId="PREPROC-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_3" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRACPP2023-19_0_3-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_0_4" desc="#undef should only be used for macros defined previously in the same file" id="MISRACPP2023-19_0_4-a" origId="PREPROC-25_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRACPP2023-19_1_1-a" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRACPP2023-19_1_2-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_1_3" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRACPP2023-19_1_3-a" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_1" desc="Use unique multiple include guards" id="MISRACPP2023-19_2_1-b" origId="PFO-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_2" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRACPP2023-19_2_2-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_2_3" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRACPP2023-19_2_3-a" origId="MISRA2004-19_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_1" desc="The # and ## preprocessor operators should not be used" id="MISRACPP2023-19_3_1-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_2" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRACPP2023-19_3_2-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_3" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRACPP2023-19_3_3-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_4" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRACPP2023-19_3_4-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_3_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRACPP2023-19_3_5-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_6_1" desc="The #pragma directive shall not be used" id="MISRACPP2023-19_6_1-a" origId="PREPROC-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-19_6_1" desc="The '_Pragma' operator should not be used" id="MISRACPP2023-19_6_1-b" origId="PREPROC-23_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRACPP2023-21_10_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_2" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRACPP2023-21_10_2-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_2" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRACPP2023-21_10_2-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_10_3" desc="The signal handling facilities of &lt;signal.h>, except for a call to the 'signal()' function with a value of SIG_IGN, shall not be used" id="MISRACPP2023-21_10_3-a" origId="CODSTA-244" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_1" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_1-a" origId="MISRA2004-20_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_2" desc="The string handling functions from &lt;cstring>, &lt;cstdlib>, &lt;cwchar> and &lt;cinttypes> shall not be used" id="MISRACPP2023-21_2_2-a" origId="CODSTA-242" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_3-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_2_4" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRACPP2023-21_2_4-a" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-21_6_1" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_1-a" origId="MISRA2004-20_4" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-21_6_2" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_2-a" origId="MISRA2004-20_4" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_2" desc="Any member function named 'allocate' or 'deallocate' enclosed by namespace 'std' should not be used" id="MISRACPP2023-21_6_2-b" origId="MRM-62_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_2" desc="The 'std::unique_ptr::release' function should not be used" id="MISRACPP2023-21_6_2-c" origId="MRM-62_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Destructor should not be called manually" id="MISRACPP2023-21_6_3-a" origId="MRM-31_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Do not declare the 'new' and 'delete' operators" id="MISRACPP2023-21_6_3-b" origId="MRM-59" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="The memory management functions from the &lt;new> and &lt;memory> headers should not be used" id="MISRACPP2023-21_6_3-c" origId="MRM-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_3" desc="Advanced memory management operators 'new' and 'delete' should not be used" id="MISRACPP2023-21_6_3-d" origId="MRM-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_4" desc="Define both sized and unsized versions of operator delete" id="MISRACPP2023-21_6_4-a" origId="CODSTA-MCPP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-21_6_5" desc="Do not delete objects with incomplete class at the point of deletion" id="MISRACPP2023-21_6_5-a" origId="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-22_3_1" desc="The 'assert' macro shall not be used with a constant expression" id="MISRACPP2023-22_3_1-a" origId="CODSTA-314" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-22_4_1" desc="The literal value zero shall be the only value assigned to errno" id="MISRACPP2023-22_4_1-a" origId="CODSTA-239" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-23_11_1" desc="The raw pointer constructors of 'std::shared_ptr' and 'std::unique_ptr' should not be used" id="MISRACPP2023-23_11_1-a" origId="CODSTA-MCPP-57" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-24_5_1" desc="The character handling functions from &lt;cctype> and &lt;cwctype> shall not be used" id="MISRACPP2023-24_5_1-a" origId="CODSTA-237" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-24_5_2" desc="The C++ Standard Library functions 'memcpy', 'memmove' and 'memcmp' from &lt;cstring> should not be used" id="MISRACPP2023-24_5_2-a" origId="CODSTA-238" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_1" desc="The 'setlocale' function should not be used" id="MISRACPP2023-25_5_1-a" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_1" desc="The 'std::locale::global' function should not be used" id="MISRACPP2023-25_5_1-b" origId="CODSTA-CPP-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRACPP2023-25_5_2-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRACPP2023-25_5_2-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_2" desc="The address of the 'localeconv', 'getenv', 'setlocale' or, 'strerror' function should not be taken" id="MISRACPP2023-25_5_2-c" origId="CODSTA-185_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-25_5_3" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRACPP2023-25_5_3-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-26_3_1" desc="Avoid using vector&lt;bool>" id="MISRACPP2023-26_3_1-a" origId="STL-14" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_3_1" desc="Predicates shall not have persistent side effects" id="MISRACPP2023-28_3_1-a" origId="GLOBAL-PREDICATENOSE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="MISRACPP2023-28_6_1-a" origId="CODSTA-MCPP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should be used to forward forwarding references" id="MISRACPP2023-28_6_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should only be used to forward forwarding references" id="MISRACPP2023-28_6_2-b" origId="CODSTA-MCPP-13_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_3" desc="Do not subsequently use the argument to std::forward" id="MISRACPP2023-28_6_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_3" desc="Do not rely on the value of a moved-from object" id="MISRACPP2023-28_6_3-b" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-28_6_4" desc="The result of std::remove, std::remove_if, std::unique and empty shall be used" id="MISRACPP2023-28_6_4-a" origId="CODSTA-CPP-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-30_0_1" desc="The input/output library stdio.h shall not be used" id="MISRACPP2023-30_0_1-a" origId="MISRA2004-20_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-30_0_1" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRACPP2023-30_0_1-b" origId="CODSTA-110" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-30_0_2" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="MISRACPP2023-30_0_2-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="Do not include headers deprecated in the C++17 standard" id="MISRACPP2023-4_1_2-a" origId="CODSTA-MCPP-58" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="The 'uncaught_exception' function deprecated in the C++17 standard should not be used" id="MISRACPP2023-4_1_2-b" origId="CODSTA-MCPP-59" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="Do not use throw exception specifications" id="MISRACPP2023-4_1_2-c" origId="EXCEPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_2" desc="A constexpr static data member should not be declared outside the class definition" id="MISRACPP2023-4_1_2-d" origId="OPT-44" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid incorrect shift operations" id="MISRACPP2023-4_1_3-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid signed integer overflows" id="MISRACPP2023-4_1_3-b" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid null pointer dereferencing" id="MISRACPP2023-4_1_3-c" origId="BD-PB-NP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_1_3" desc="Avoid division by zero" id="MISRACPP2023-4_1_3-d" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRACPP2023-4_6_1-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRACPP2023-4_6_1-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRACPP2023-4_6_1-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRACPP2023-4_6_1-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRACPP2023-4_6_1-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRACPP2023-4_6_1-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRACPP2023-4_6_1-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_0_1" desc="Trigraphs shall not be used" id="MISRACPP2023-5_0_1-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not declare entities in the standard library namespaces: posix, std and stdN" id="MISRACPP2023-5_10_1-a" origId="CODSTA-CPP-95_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="MISRACPP2023-5_10_1-b" origId="NAMING-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="An identifier shall not contain a double underscore '__'" id="MISRACPP2023-5_10_1-c" origId="NAMING-33_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="MISRACPP2023-5_10_1-d" origId="NAMING-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="A user-defined literal suffix should be directly preceded by a literal operator" id="MISRACPP2023-5_10_1-e" origId="NAMING-51_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="A macro identifier should have an appropriate form" id="MISRACPP2023-5_10_1-f" origId="NAMING-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_10_1" desc="Do not declare identifiers with names reserved in the standard library" id="MISRACPP2023-5_10_1-g" origId="NAMING-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="MISRACPP2023-5_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_2" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRACPP2023-5_13_2-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_3" desc="Octal constants (other than zero) shall not be used" id="MISRACPP2023-5_13_3-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_4" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRACPP2023-5_13_4-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_5" desc="The lowercase form of 'L' shall not be used as the first character in a literal suffix" id="MISRACPP2023-5_13_5-a" origId="PORT-01_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_6" desc="An integer-literal of type long long shall not use a single 'L' or 'l' in any suffix" id="MISRACPP2023-5_13_6-a" origId="PORT-38" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_7" desc="String literals with different encoding prefixes shall not be concatenated" id="MISRACPP2023-5_13_7-a" origId="PB-38_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_13_7" desc="String literals with and without encoding prefixes should not be concatenated" id="MISRACPP2023-5_13_7-b" origId="PB-38_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRACPP2023-5_7_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-5_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="MISRACPP2023-5_7_2-a" origId="MISRA2004-2_4" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-5_7_3" desc="Line-splicing shall not be used in // comments" id="MISRACPP2023-5_7_3-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Always declare functions at file scope" id="MISRACPP2023-6_0_1-a" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Parameter names in function declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-b" origId="FORMAT-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_1" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-c" origId="FORMAT-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_2" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRACPP2023-6_0_2-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="11;" cat="MISRACPP2023-6_0_3" desc="The global namespace shall only contain main() and namespace declarations" id="MISRACPP2023-6_0_3-a" origId="CODSTA-CPP-36" sev="4" total="12"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_0_4" desc="The identifier main shall not be used for a function other than the global function main" id="MISRACPP2023-6_0_4-a" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_1" desc="The One Definition Rule shall not be violated" id="MISRACPP2023-6_2_1-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_2" desc="All declarations of an object or function shall have compatible types" id="MISRACPP2023-6_2_2-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_2" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRACPP2023-6_2_2-b" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="An identifier with external linkage shall have no more then one external definition" id="MISRACPP2023-6_2_3-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-b" origId="GLOBAL-ONEDEFTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-c" origId="GLOBAL-ONEDEFINLINE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_3" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="MISRACPP2023-6_2_3-d" origId="TEMPL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_2_4" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="MISRACPP2023-6_2_4-a" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_1" desc="Member variable names in derived classes should not be the same as member variable names in base classes" id="MISRACPP2023-6_4_1-f" origId="CODSTA-CPP-110" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_1" desc="A variable declared in an inner scope shall not hide a variable declared in an outer scope" id="MISRACPP2023-6_4_1-g" origId="CODSTA-303" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-a" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide non-equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_4_3" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRACPP2023-6_4_3-a" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_5_1" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRACPP2023-6_5_1-a" origId="MISRA-023" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_5_2" desc="Do not use static keyword except inside functions and classes" id="MISRACPP2023-6_5_2-a" origId="CODSTA-CPP-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_5_2" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRACPP2023-6_5_2-b" origId="MISRA-024" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_7_1" desc="Local variables shall not have static storage duration" id="MISRACPP2023-6_7_1-a" origId="CODSTA-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_7_2" desc="Global variables and static data members should not be used" id="MISRACPP2023-6_7_2-a" origId="CODSTA-CPP-82" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not point to a wrapped object that has been freed" id="MISRACPP2023-6_8_1-a" origId="BD-PB-WRAPESC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not read the value of a non-active union field" id="MISRACPP2023-6_8_1-b" origId="BD-PB-NAUNF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_1" desc="Do not use an object after its lifetime has ended" id="MISRACPP2023-6_8_1-c" origId="BD-PB-LIFETIME" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_2" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRACPP2023-6_8_2-a" origId="MISRA2004-17_6_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_2" desc="Never return lambdas that capture local objects by reference" id="MISRACPP2023-6_8_2-b" origId="CODSTA-MCPP-17" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_3" desc="The address of an object with automatic storage duration shall not be assigned to an object with a greater lifetime" id="MISRACPP2023-6_8_3-a" origId="CODSTA-311" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_8_4" desc="Member functions returning references to their object should be ref-qualified appropriately" id="MISRACPP2023-6_8_4-a" origId="CODSTA-CPP-206" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-6_9_1" desc="The same type aliases shall be used in all declarations of the same entity" id="MISRACPP2023-6_9_1-a" origId="CODSTA-67_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="10;" cat="MISRACPP2023-6_9_2" desc="The names of the standard signed integer types and standard unsigned integer types should not be used" id="MISRACPP2023-6_9_2-a" origId="CODSTA-223_c" sev="4" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_1" desc="There shall be no conversion from type bool" id="MISRACPP2023-7_0_1-a" origId="CODSTA-CPP-211" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_2" desc="There shall be no conversion to type bool" id="MISRACPP2023-7_0_2-a" origId="CODSTA-CPP-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_3" desc="The numerical value of a character shall not be used" id="MISRACPP2023-7_0_3-a" origId="CODSTA-316" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_4" desc="Operands of bitwise and complement operators shall have an unsigned type" id="MISRACPP2023-7_0_4-a" origId="CODSTA-307" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_0_4" desc="Operands of shift operators shall have an unsigned type" id="MISRACPP2023-7_0_4-b" origId="CODSTA-308" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_0_5" desc="Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" id="MISRACPP2023-7_0_5-a" origId="CODSTA-310" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_0_6" desc="Assignment between numeric types shall be appropriate" id="MISRACPP2023-7_0_6-a" origId="CODSTA-312" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_11_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="MISRACPP2023-7_11_1-a" origId="CODSTA-MCPP-04" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-7_11_1" desc="The 'NULL' identifier should not be used" id="MISRACPP2023-7_11_1-b" origId="CODSTA-CPP-111" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_2" desc="An object of array type should not decay to a pointer when it is passed as a function argument" id="MISRACPP2023-7_11_2-a" origId="PB-41_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_2" desc="An object of array type should not be passed as a variadic argument to a function" id="MISRACPP2023-7_11_2-b" origId="PB-41_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-7_11_3" desc="A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" id="MISRACPP2023-7_11_3-a" origId="CODSTA-309" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_0_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRACPP2023-8_0_1-a" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_0_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRACPP2023-8_0_1-b" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRACPP2023-8_14_1-a" origId="MISRA2004-12_4_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRACPP2023-8_18_1-a" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-b" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-c" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-8_18_2" desc="The result of an assignment operator should not be used" id="MISRACPP2023-8_18_2-a" origId="CODSTA-138" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_19_1" desc="The comma operator shall not be used" id="MISRACPP2023-8_19_1-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_1_1" desc="A non-transient lambda shall not implicitly capture this" id="MISRACPP2023-8_1_1-a" origId="CODSTA-MCPP-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_1_2" desc="Variables should be captured explicitly in a non-transient lambda" id="MISRACPP2023-8_1_2-a" origId="CODSTA-MCPP-103" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRACPP2023-8_20_1-a" origId="PB-73" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions in preprocessor directives should not lead to wraparound" id="MISRACPP2023-8_20_1-b" origId="PB-73_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_1" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRACPP2023-8_2_1-a" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_10" desc="Do not use recursion" id="MISRACPP2023-8_2_10-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_11" desc="An argument passed via ellipsis shall have an appropriate type" id="MISRACPP2023-8_2_11-a" origId="CODSTA-CPP-207" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-8_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRACPP2023-8_2_2-a" origId="CODSTA-CPP-66" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_3" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRACPP2023-8_2_3-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_4" desc="Casts shall not be performed between a pointer to a function and any other type" id="MISRACPP2023-8_2_4-a" origId="CODSTA-124_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_5" desc="Avoid using reinterpret_cast" id="MISRACPP2023-8_2_5-a" origId="CODSTA-CPP-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_6" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-a" origId="CODSTA-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_6" desc="An object with enumeration type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-b" origId="CODSTA-65_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_7-a" origId="MISRA2004-11_3_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to 'intptr_t' and 'uintptr_t' types" id="MISRACPP2023-8_2_7-b" origId="CODSTA-240" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_8" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_8-a" origId="MISRA2004-11_3_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_2_9" desc="The operand to typeid shall not be an expression of polymorphic class type" id="MISRACPP2023-8_2_9-a" origId="CODSTA-CPP-204" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRACPP2023-8_3_1-a" origId="MISRA2004-12_9" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_3_2" desc="The built-in unary + operator should not be used" id="MISRACPP2023-8_3_2-a" origId="CODSTA-236" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid accessing arrays out of bounds" id="MISRACPP2023-8_7_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRACPP2023-8_7_1-b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow when reading from a buffer" id="MISRACPP2023-8_7_1-c" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow when writing to a buffer" id="MISRACPP2023-8_7_1-d" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRACPP2023-8_7_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_7_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRACPP2023-8_7_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-8_9_1" desc="Do not compare two unrelated pointers" id="MISRACPP2023-8_9_1-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_2_1" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="MISRACPP2023-9_2_1-a" origId="PB-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRACPP2023-9_3_1-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-9_3_1" desc="'if' and 'else' should be followed by a compound statement" id="MISRACPP2023-9_3_1-b" origId="MISRA2004-14_9" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_1" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRACPP2023-9_4_1-a" origId="CODSTA-241" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="MISRACPP2023-9_4_2" desc="The first or the last label of a switch statement should be the 'default' label unless all enumeration values are tested" id="MISRACPP2023-9_4_2-a" origId="CODSTA-61_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRACPP2023-9_4_2" desc="Every switch branch should be unconditionally terminated" id="MISRACPP2023-9_4_2-b" origId="CODSTA-64_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRACPP2023-9_4_2-c" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRACPP2023-9_4_2-d" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="Every switch statement shall have at least two switch-clauses" id="MISRACPP2023-9_4_2-e" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="The 'switch' statement should not contain labels other than 'case' and 'default'" id="MISRACPP2023-9_4_2-f" origId="CODSTA-243" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_4_2" desc="The condition of a 'switch' statement should only be preceded by an optional simple-declaration" id="MISRACPP2023-9_4_2-g" origId="CODSTA-MCPP-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_5_1" desc="Legacy 'for' statements should be simple" id="MISRACPP2023-9_5_1-a" origId="CODSTA-315" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_5_2" desc="A for-range-initializer shall contain at most one function call" id="MISRACPP2023-9_5_2-a" origId="CODSTA-MCPP-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_1" desc="The goto statement shall not be used" id="MISRACPP2023-9_6_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_2" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRACPP2023-9_6_2-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_3" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRACPP2023-9_6_3-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_4" desc="Never return from functions that should not return" id="MISRACPP2023-9_6_4-a" origId="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRACPP2023-9_6_5" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRACPP2023-9_6_5-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="23;" authUrg="22;" id="2" total="23"/>
            <Severity authTot="30;" authUrg="28;" id="4" total="30"/>
         </SeverityList>
      </Rules>
      
  <Supps>
    <Supp suppAuth="zak" locRef="1" suppRsn="ok in this case" refId="1" suppLine="19" type="comment" suppMsg="Do not convert type 'double' to type 'bool'" suppRule="MISRACPP2023-7_0_2-a" suppLoc="/ATMproject/src/Account.cxx"/>
  </Supps>

      
  <StdViols>
    <StdViol msg="Move constructor of class 'Account' should specify 'noexcept'" ln="8" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-18_4_1-a" lnHash="1100656247" rule.header="Exception-unfriendly functions shall be noexcept" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="01a18658-9311-3100-b16e-ef23b75cace7" locEndPos="10" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="2" locRef="1" tool="c++test" lineHash="1100656247" revComm="" unbViolId="61553aa7-9686-3337-9712-a0405349ca8d" locType="sr" hash="-1109400981"/>
    <StdViol msg="User-provided 'move constructor' should have a 'noexcept' specifier" ln="8" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-15_0_2-a" lnHash="1100656247" rule.header="User-provided copy and move member functions of a class should have appropriate signatures" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="950c5a5b-965e-33d0-93ba-e95e39e7ab4c" locEndPos="10" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="4" locRef="1" tool="c++test" lineHash="1100656247" revComm="" unbViolId="e896e818-67d4-3097-afcb-fed6a8f7d278" locType="sr" hash="-1109400981"/>
    <StdViol msg="Do not convert type 'double' to type 'bool'" ln="19" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-7_0_2-a" lnHash="1119776878" rule.header="There shall be no conversion to type bool" locStartPos="5" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="3d9a69d9-34b6-31c2-aad6-a6523dce0f0e" locEndPos="6" locEndLn="19" goals="0," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" suppRef="1" locStartln="19" sev="2" locRef="1" tool="c++test" lineHash="1119776878" revComm="" unbViolId="b68c0e0d-0a45-3b05-aef2-bd2ffdc71a69" locType="sr" hash="-1109400981"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="42" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="-536743894" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="e4bb7b44-9283-39d4-a667-b16136997f37" locEndPos="1" urgent="true" locEndLn="42" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="42" sev="4" locRef="1" tool="c++test" lineHash="-536743894" revComm="" unbViolId="cec96c65-5be5-3868-93ef-756c165c9605" locType="sr" hash="-1109400981"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="44" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="67392142" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="9f4f0a70-ac2d-37cd-8d19-72c937d1d240" locEndPos="2" urgent="true" locEndLn="44" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="44" sev="4" locRef="1" tool="c++test" lineHash="67392142" revComm="" unbViolId="af5b93a2-56b0-3de4-9e6f-b22cce3c544e" locType="sr" hash="-1109400981"/>
    <FlowViol msg="Condition &quot;display.getType() == 0&quot; always evaluates to false" ln="46" locFile="/ATMproject/src/Account.cxx" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="zak" FirstElSrcRngEndLn="43" rule="MISRACPP2023-0_0_2-a" FirstElSrcRngStartPos="0" lnHash="1963162260" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/ATMproject/src/Account.cxx" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" revTime="0" id="109259544" lang="cpp" violId="a94847f5-5fb7-32ec-a276-4d941e66d461" locEndPos="0" locEndLn="47" goals="0," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="46" sev="4" locRef="1" tool="c++test" lineHash="1963162260" revComm="" unbViolId="3550859e-43bf-3807-be76-879d7ddb339b" locType="sr" hash="-1109400981" causeLocRef="1">
      <ElDescList>
        <ElDesc lineHash="-536743894" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1109400981" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/ATMproject/src/Account.cxx" desc="int Account::listTransactions(BaseDisplay&amp; display, UserRequest type) {" ElType=".C" rngLn="42">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="67392142" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1109400981" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/ATMproject/src/Account.cxx" desc="int transactionsCount = 0;" ElType="." rngLn="44"/>
        <ElDesc lineHash="1963162260" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1109400981" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/ATMproject/src/Account.cxx" desc="display.getType()" ElType="!" rngLn="46">
          <ElDescList>
            <ElDesc lineHash="264830969" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-812920828" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/ATMproject/src/BaseDisplay.cxx" desc="BaseDisplay::DisplayType BaseDisplay::getType() {return SECURE;}" ElType="!" rngLn="20"/>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1963162260" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1109400981" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/ATMproject/src/Account.cxx" desc="if (display.getType() == BaseDisplay::UNKNOWN) {" ElType=".P" rngLn="46">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Unused function's 'for_each' return value" ln="58" locFile="/ATMproject/src/Account.cxx" auth="zak" rule="MISRACPP2023-0_1_2-a" lnHash="483806807" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="6a24b6f3-9069-38af-82d7-cb8f6e0a3286" locEndPos="2" urgent="true" locEndLn="58" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="58" sev="2" locRef="1" tool="c++test" lineHash="483806807" revComm="" unbViolId="b00fd34e-1d20-31d9-b6f3-351a4cc29fe1" locType="sr" hash="-1109400981"/>
    <StdViol msg="Do not use the 'using' directive in the global namespace" ln="5" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-298969501" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="33947b4f-1657-379d-b3fc-b1c7992771a4" locEndPos="12" urgent="true" locEndLn="5" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="5" sev="4" locRef="2" tool="c++test" lineHash="-298969501" revComm="" unbViolId="0d682e3b-7d3d-39d0-96f8-4b922eb35ff6" locType="sr" hash="-1796775297"/>
    <StdViol msg="A constructor in the 'ATM' class should initialize the following member variables 'myBank, myCurrentAccount, myDisplay' in an initialization list" ln="7" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-15_1_4-a" lnHash="-1547882108" rule.header="All direct, non-static data members of a non-aggregate class should be initialized at the top of a constructor body" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="3f78a19f-92bb-3f2b-9137-677af1d779e8" locEndPos="6" urgent="true" locEndLn="7" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="7" sev="4" locRef="2" tool="c++test" lineHash="-1547882108" revComm="" unbViolId="7039f7e3-bbf2-3888-9775-51a40ecbbcbd" locType="sr" hash="-1796775297"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="13" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="-2065354134" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="605bda64-645c-3c93-b6b2-2602c46e1037" locEndPos="23" urgent="true" locEndLn="13" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="13" sev="4" locRef="2" tool="c++test" lineHash="-2065354134" revComm="" unbViolId="9aadb44b-6046-392a-b590-324ba1725b93" locType="sr" hash="-1796775297"/>
    <StdViol msg="Assignment operator '=' is used in improper context" ln="15" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-8_18_2-a" lnHash="1719088503" rule.header="The result of an assignment operator should not be used" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="9e987966-39ca-3cb6-8452-0c7252e7463c" locEndPos="12" urgent="true" locEndLn="15" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="15" sev="4" locRef="2" tool="c++test" lineHash="1719088503" revComm="" unbViolId="4f1ea3a3-8051-3977-9551-e97d2fe1e412" locType="sr" hash="-1796775297"/>
    <StdViol msg="Conditional statement 'if' in a function 'fillUserRequest' should be followed by a block" ln="23" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-9_3_1-b" lnHash="-1069739612" rule.header="'if' and 'else' should be followed by a compound statement" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="e8d662ad-fedd-3fe8-af86-5cca36b82677" locEndPos="5" urgent="true" locEndLn="23" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="23" sev="2" locRef="2" tool="c++test" lineHash="-1069739612" revComm="" unbViolId="a0d89410-029e-3ffa-9db5-95f801f4405d" locType="sr" hash="-1796775297"/>
    <StdViol msg="There is no 'default' label in a switch statement" ln="24" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-9_4_2-a" lnHash="1595945398" rule.header="The first or the last label of a switch statement should be the 'default' label unless all enumeration values are tested" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="d0c5b7ec-6d82-31dd-a231-f17d4ef17eef" locEndPos="9" urgent="true" locEndLn="24" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="24" sev="2" locRef="2" tool="c++test" lineHash="1595945398" revComm="" unbViolId="054244c4-6bcc-3333-b3b0-e88954f8e3b0" locType="sr" hash="-1796775297"/>
    <StdViol msg="The 'case' branch in a switch should be unconditionally terminated" ln="32" locFile="/ATMproject/src/ATM.cxx" auth="zak" rule="MISRACPP2023-9_4_2-b" lnHash="-579481919" rule.header="Every switch branch should be unconditionally terminated" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="6c2e93fb-dc88-308c-a29a-06586314316f" locEndPos="13" urgent="true" locEndLn="32" goals="1," rev="3282599353857924489226f46091637d43a9ade6" locStartln="32" sev="2" locRef="2" tool="c++test" lineHash="-579481919" revComm="" unbViolId="9585ea31-7704-32a8-857f-e0c9aa77ec0f" locType="sr" hash="-1796775297"/>
    <StdViol msg="A constructor in the 'Bank' class should initialize the following member variables 'myCurrentAccountNumber' in an initialization list" ln="4" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-15_1_4-a" lnHash="1371654496" rule.header="All direct, non-static data members of a non-aggregate class should be initialized at the top of a constructor body" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="ea10587c-0774-311f-8ccd-bdb5e44eb37a" locEndPos="7" urgent="true" locEndLn="4" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="4" sev="4" locRef="3" tool="c++test" lineHash="1371654496" revComm="" unbViolId="47892d30-7bf5-3d7b-b245-bc8d54dd3e7b" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not define the '~Bank' destructor with an empty body" ln="9" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-15_0_1-b" lnHash="487538751" rule.header="Destructor shall have a non-empty body" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="429e340b-8bd0-3882-9dfa-69d54c69cd5f" locEndPos="7" urgent="true" locEndLn="9" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="9" sev="2" locRef="3" tool="c++test" lineHash="487538751" revComm="" unbViolId="d29ab636-49c7-3385-9469-630c430a7385" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="15" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="1544839595" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="cbc04f1f-003d-3d80-aec8-87ccc3d2fa99" locEndPos="27" urgent="true" locEndLn="15" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="1544839595" revComm="" unbViolId="ec49f868-3467-3ef6-b389-6993f4ffb66e" locType="sr" hash="1497090602"/>
    <StdViol msg="Integral promotion or the usual arithmetic conversions shall not change the type signedness of an operand from 'int' to 'unsigned long'" ln="18" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-7_0_5-a" lnHash="-1454903092" rule.header="Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="1c491be6-d754-3d5f-bb89-021dc920b2ab" locEndPos="29" urgent="true" locEndLn="18" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="18" sev="2" locRef="3" tool="c++test" lineHash="-1454903092" revComm="" unbViolId="d567f992-cbed-37c5-86e5-0154566691bf" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not use a C-style cast to the 'Account *' type" ln="20" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-8_2_2-a" lnHash="1591267424" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="4dd7f4f4-de9a-320e-a66e-3fa9d7475455" locEndPos="23" urgent="true" locEndLn="20" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="20" sev="2" locRef="3" tool="c++test" lineHash="1591267424" revComm="" unbViolId="5ef072b1-8478-304a-a7e4-571d991f6218" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not pass an argument of type 'int' to a function parameter of type 'size_type'" ln="20" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-7_0_6-a" lnHash="1591267424" rule.header="Assignment between numeric types shall be appropriate" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="979c6855-db75-3d28-839a-4e7c580de722" locEndPos="44" urgent="true" locEndLn="20" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="20" sev="2" locRef="3" tool="c++test" lineHash="1591267424" revComm="" unbViolId="d894ec1b-09b4-357b-8920-bbbf0d86f47d" locType="sr" hash="1497090602"/>
    <StdViol msg="Prefer 'nullptr' to '__null' as the null pointer value" ln="25" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-7_11_1-a" lnHash="1568676787" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="86b23e7a-2ee0-330f-98d9-910f45225f4a" locEndPos="22" urgent="true" locEndLn="25" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="25" sev="2" locRef="3" tool="c++test" lineHash="1568676787" revComm="" unbViolId="fc643fd4-4609-3596-97c9-1ae5ebdcd0e7" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not use the 'NULL' identifier" ln="25" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-7_11_1-b" lnHash="1568676787" rule.header="The 'NULL' identifier should not be used" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="cecaa16d-3620-37ea-b6b2-78b2fb215e6f" locEndPos="23" urgent="true" locEndLn="25" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="25" sev="2" locRef="3" tool="c++test" lineHash="1568676787" revComm="" unbViolId="0d7f8cff-38a1-390f-a88f-b8917a0fd315" locType="sr" hash="1497090602"/>
    <StdViol msg="Section of code should not be 'commented out'" ln="28" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-5_7_2-a" lnHash="1115898124" rule.header="Sections of code should not be &quot;commented out&quot;" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="1fb92c01-852c-3744-b1db-9d8da7447e21" locEndPos="5" urgent="true" locEndLn="28" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="28" sev="4" locRef="3" tool="c++test" lineHash="1115898124" revComm="" unbViolId="fef21de7-3887-3ffe-8efa-680ab333c6b3" locType="sr" hash="1497090602"/>
    <StdViol msg="'new' operator should not be used" ln="36" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-21_6_2-a" lnHash="1352107249" rule.header="Dynamic heap memory allocation shall not be used" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="27156043-fda7-3b30-b32f-7194ae5154f9" locEndPos="28" urgent="true" locEndLn="36" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="36" sev="2" locRef="3" tool="c++test" lineHash="1352107249" revComm="" unbViolId="277a9adf-9758-3c69-bf44-d1082df1743b" locType="sr" hash="1497090602"/>
    <StdViol msg="'new' operator should not be used" ln="36" locFile="/ATMproject/src/Bank.cxx" auth="zak" rule="MISRACPP2023-21_6_1-a" lnHash="1352107249" rule.header="Dynamic heap memory allocation shall not be used" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="1ded0fa3-7baa-32a7-b5d8-d79183c9dea8" locEndPos="28" urgent="true" locEndLn="36" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="36" sev="4" locRef="3" tool="c++test" lineHash="1352107249" revComm="" unbViolId="32494abd-0431-324a-9277-715ccc01b4b9" locType="sr" hash="1497090602"/>
    <StdViol msg="Do not use the 'using' declaration in the global namespace" ln="5" locFile="/ATMproject/src/BaseDisplay.cxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="316495161" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="d29d17b5-5a1c-33ce-b3d2-1dd01aaabdd1" locEndPos="1" locEndLn="5" goals="0," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="5" sev="4" locRef="4" tool="c++test" lineHash="316495161" revComm="" unbViolId="455a6600-13fe-3924-ba73-e649f54696f4" locType="sr" hash="-812920828"/>
    <StdViol msg="The 'msg' parameter is never used in the 'logError' virtual function" ln="21" locFile="/ATMproject/src/BaseDisplay.cxx" auth="zak" rule="MISRACPP2023-0_2_2-b" lnHash="-919819380" rule.header="There shall be no unused named parameters in virtual functions" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="b7148bb8-2b28-3ad3-b723-4ccc21ba7965" locEndPos="40" urgent="true" locEndLn="21" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="21" sev="2" locRef="4" tool="c++test" lineHash="-919819380" revComm="" unbViolId="0447b3f6-47a6-3067-9c74-78b4a9cf973e" locType="sr" hash="-812920828"/>
    <StdViol msg="There is no 'default' label in a switch statement" ln="25" locFile="/ATMproject/src/BaseDisplay.cxx" auth="zak" rule="MISRACPP2023-9_4_2-a" lnHash="-1874749295" rule.header="The first or the last label of a switch statement should be the 'default' label unless all enumeration values are tested" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="d5767664-a37d-342e-b81b-6610a1fa0bb0" locEndPos="5" locEndLn="25" goals="0," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="25" sev="2" locRef="4" tool="c++test" lineHash="-1874749295" revComm="" unbViolId="00f0321e-8f8c-3bdd-8d5c-d543a47cea2d" locType="sr" hash="-812920828"/>
    <StdViol msg="Do not declare the 'UserRequest' type in the global namespace" ln="6" locFile="/ATMproject/include/BaseDisplay.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="396733374" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="9315b835-dcec-382a-9001-7ed5df0395d1" locEndPos="12" urgent="true" locEndLn="6" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="6" sev="4" locRef="5" tool="c++test" lineHash="396733374" revComm="" unbViolId="13c6cb65-fcf2-3038-969a-b85edb149b10" locType="sr" hash="14023177"/>
    <StdViol msg="Class 'BaseDisplay' shall have a customized copy constructor to be a general manager" ln="8" locFile="/ATMproject/include/BaseDisplay.hxx" auth="zak" rule="MISRACPP2023-15_0_1-a" lnHash="1229723113" rule.header="Special member functions shall be provided appropriately" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="3878fba7-97de-363a-83be-8c687616b0eb" locEndPos="7" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="2" locRef="5" tool="c++test" lineHash="1229723113" revComm="" unbViolId="99cc5357-99d1-3e92-8c6a-db4a922da503" locType="sr" hash="14023177"/>
    <StdViol msg="Class 'BaseDisplay' shall have a customized copy assignment operator to be a copy-assignable general manager" ln="8" locFile="/ATMproject/include/BaseDisplay.hxx" auth="zak" rule="MISRACPP2023-15_0_1-a" lnHash="1229723113" rule.header="Special member functions shall be provided appropriately" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="4edf92b5-ef99-3354-9f5c-6dbb87d25f94" locEndPos="7" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="2" locRef="5" tool="c++test" lineHash="1229723113" revComm="" unbViolId="be74a01e-3da1-3db8-a15f-d9f1296ffeb4" locType="sr" hash="14023177"/>
    <StdViol msg="Do not declare the 'BaseDisplay' type in the global namespace" ln="8" locFile="/ATMproject/include/BaseDisplay.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="1229723113" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="e0d21e76-a87f-3b0e-8bd8-6c1cc752ca2f" locEndPos="7" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="4" locRef="5" tool="c++test" lineHash="1229723113" revComm="" unbViolId="4a406cda-ab7a-3a3f-bd14-7a12bca25bf5" locType="sr" hash="14023177"/>
    <StdViol msg="Do not define the '~BaseDisplay' destructor with an empty body" ln="16" locFile="/ATMproject/include/BaseDisplay.hxx" auth="zak" rule="MISRACPP2023-15_0_1-b" lnHash="401384735" rule.header="Destructor shall have a non-empty body" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="87d5936f-280a-3676-abbb-215e0994aa38" locEndPos="9" urgent="true" locEndLn="16" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="16" sev="2" locRef="5" tool="c++test" lineHash="401384735" revComm="" unbViolId="5fecef63-3098-368e-8bc6-91cc0af26b47" locType="sr" hash="14023177"/>
    <StdViol msg="Class 'Account' shall have a customized destructor because it has customized copy or move operations" ln="13" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-15_0_1-a" lnHash="1462923109" rule.header="Special member functions shall be provided appropriately" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="a3630903-e457-3ccc-82e5-214cebd93025" locEndPos="7" urgent="true" locEndLn="13" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="13" sev="2" locRef="6" tool="c++test" lineHash="1462923109" revComm="" unbViolId="ddc63dfe-9a8f-3ac2-b709-eea5a8661ced" locType="sr" hash="-1172569836"/>
    <StdViol msg="Do not declare the 'Account' type in the global namespace" ln="13" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="1462923109" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="a603c8ac-fbbf-33e1-9322-b1662269b62c" locEndPos="7" urgent="true" locEndLn="13" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="13" sev="4" locRef="6" tool="c++test" lineHash="1462923109" revComm="" unbViolId="e2d2aacd-1396-3e53-8035-5245c05a1821" locType="sr" hash="-1172569836"/>
    <StdViol msg="Move constructor of class 'Account' should specify 'noexcept'" ln="21" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-18_4_1-a" lnHash="1125280484" rule.header="Exception-unfriendly functions shall be noexcept" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="ea420ae1-b0dd-39bf-8942-792b923d458b" locEndPos="9" urgent="true" locEndLn="21" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="21" sev="2" locRef="6" tool="c++test" lineHash="1125280484" revComm="" unbViolId="21dd3239-37b0-3026-89f0-bc15d1cde645" locType="sr" hash="-1172569836"/>
    <StdViol msg="User-provided 'move constructor' should have a 'noexcept' specifier" ln="21" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-15_0_2-a" lnHash="1125280484" rule.header="User-provided copy and move member functions of a class should have appropriate signatures" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="5d0ac2c8-c7a5-389b-a92e-d1b54d78d5ed" locEndPos="9" urgent="true" locEndLn="21" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="21" sev="4" locRef="6" tool="c++test" lineHash="1125280484" revComm="" unbViolId="eef9c70c-e8b2-3f3a-a9e0-f5e5649e994a" locType="sr" hash="-1172569836"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="38" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="1998327676" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="7a74bf61-3237-3344-b538-a724085b4917" locEndPos="31" urgent="true" locEndLn="38" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="38" sev="4" locRef="6" tool="c++test" lineHash="1998327676" revComm="" unbViolId="efbf6378-cd1a-3332-909e-c9e34343eb28" locType="sr" hash="-1172569836"/>
    <StdViol msg="Unused function's 'for_each' return value" ln="60" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-0_1_2-a" lnHash="-771810556" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="566ee352-428d-3011-bb14-ee661db5f186" locEndPos="13" urgent="true" locEndLn="60" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="60" sev="2" locRef="6" tool="c++test" lineHash="-771810556" revComm="" unbViolId="de8c67df-110e-3270-96a8-a4754a078528" locType="sr" hash="-1172569836"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="64" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="955038357" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="2ac214fd-f7d9-3a35-a8da-ab75fa40fe05" locEndPos="9" urgent="true" locEndLn="64" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="64" sev="4" locRef="6" tool="c++test" lineHash="955038357" revComm="" unbViolId="57287acf-507c-3e9c-9110-473d37712f65" locType="sr" hash="-1172569836"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="71" locFile="/ATMproject/include/Account.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="-1903698635" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="4d745fe2-aa18-3731-9371-18016f21e2fb" locEndPos="9" urgent="true" locEndLn="71" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="71" sev="4" locRef="6" tool="c++test" lineHash="-1903698635" revComm="" unbViolId="1cb8f13c-faad-38fd-96e4-ea0a65d05d21" locType="sr" hash="-1172569836"/>
    <StdViol msg="Do not use the 'using' declaration in the global namespace" ln="6" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="316495161" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="58a2bde7-afc8-3264-8c04-bbc8a2ffcb08" locEndPos="1" urgent="true" locEndLn="6" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="6" sev="4" locRef="7" tool="c++test" lineHash="316495161" revComm="" unbViolId="b8746e98-0c81-3f8d-97ee-bb72301b5498" locType="sr" hash="365519495"/>
    <StdViol msg="Do not declare the 'Account' type in the global namespace" ln="8" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-1894023818" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="d8d0410f-b183-34b9-8de1-c548d3fefd7a" locEndPos="7" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="4" locRef="7" tool="c++test" lineHash="-1894023818" revComm="" unbViolId="20da2242-eb52-3f4e-a251-4aa951400522" locType="sr" hash="365519495"/>
    <StdViol msg="Class 'Bank' shall have a customized copy constructor to be a general manager" ln="9" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-15_0_1-a" lnHash="-349967356" rule.header="Special member functions shall be provided appropriately" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="6ba6a76e-fb68-3e6e-8953-cfaf25c99e02" locEndPos="7" urgent="true" locEndLn="9" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="9" sev="2" locRef="7" tool="c++test" lineHash="-349967356" revComm="" unbViolId="c361e2be-9c80-3ce9-a6fe-e8978ce9181f" locType="sr" hash="365519495"/>
    <StdViol msg="Class 'Bank' shall have a customized copy assignment operator to be a copy-assignable general manager" ln="9" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-15_0_1-a" lnHash="-349967356" rule.header="Special member functions shall be provided appropriately" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="e5687c23-8013-33ca-8201-5f8a097d15ab" locEndPos="7" urgent="true" locEndLn="9" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="9" sev="2" locRef="7" tool="c++test" lineHash="-349967356" revComm="" unbViolId="da1eb960-d147-3f55-b892-8dc2b1cc8c7c" locType="sr" hash="365519495"/>
    <StdViol msg="Do not declare the 'Bank' type in the global namespace" ln="9" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-349967356" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="838cb2cb-dcb1-3d1c-b788-1063388f09d0" locEndPos="7" urgent="true" locEndLn="9" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="9" sev="4" locRef="7" tool="c++test" lineHash="-349967356" revComm="" unbViolId="c5b8c889-d842-396c-aab9-6e6dd63dfda0" locType="sr" hash="365519495"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="17" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="-293824505" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="cc8ef9ec-03e8-3a01-9848-6c69f0858c0b" locEndPos="25" urgent="true" locEndLn="17" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="17" sev="4" locRef="7" tool="c++test" lineHash="-293824505" revComm="" unbViolId="24a7d393-74c3-3ddf-854e-a98464729034" locType="sr" hash="365519495"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="23" locFile="/ATMproject/include/Bank.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="1303203201" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="871a9e76-46e9-3c9f-acaf-fc43cdef586b" locEndPos="9" urgent="true" locEndLn="23" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="23" sev="4" locRef="7" tool="c++test" lineHash="1303203201" revComm="" unbViolId="c1ecc46b-0813-32a2-9899-b2f5a5b26144" locType="sr" hash="365519495"/>
    <StdViol msg="Do not declare the 'BaseDisplay' type in the global namespace" ln="8" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-533289102" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="5491b2dd-dcef-3caf-8517-235d18448f25" locEndPos="7" urgent="true" locEndLn="8" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="8" sev="4" locRef="8" tool="c++test" lineHash="-533289102" revComm="" unbViolId="d4d9faa4-958e-36d0-9710-553c7b21fed8" locType="sr" hash="1586671268"/>
    <StdViol msg="Do not declare the 'Account' type in the global namespace" ln="9" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-1894023818" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="b4b55a85-a29b-3147-88a8-a42c1207e898" locEndPos="7" urgent="true" locEndLn="9" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="9" sev="4" locRef="8" tool="c++test" lineHash="-1894023818" revComm="" unbViolId="b6a14722-998e-3b65-a7c6-92a2f74f58b9" locType="sr" hash="1586671268"/>
    <StdViol msg="Enum 'UserRequest' should explicitly define an underlying type" ln="12" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-10_2_1-a" lnHash="-586168008" rule.header="An enumeration shall be defined with an explicit underlying type" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="8cbdc416-d2e6-315f-86d6-4390801fc87e" locEndPos="12" urgent="true" locEndLn="12" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="12" sev="2" locRef="8" tool="c++test" lineHash="-586168008" revComm="" unbViolId="d5b97374-1acb-3cdc-87c4-5b627f5a52a2" locType="sr" hash="1586671268"/>
    <StdViol msg="Do not declare the 'UserRequest' type in the global namespace" ln="12" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-586168008" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="c9330e20-cb17-35d5-84ef-3d813daa4f8d" locEndPos="12" urgent="true" locEndLn="12" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="12" sev="4" locRef="8" tool="c++test" lineHash="-586168008" revComm="" unbViolId="c2805f46-0b25-30a6-b9f1-8426f62feedf" locType="sr" hash="1586671268"/>
    <StdViol msg="Do not declare the 'ATM' type in the global namespace" ln="20" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-6_0_3-a" lnHash="-11290670" rule.header="The global namespace shall only contain main() and namespace declarations" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="d47a11ae-8e1e-3062-8257-e646b4b42c29" locEndPos="7" urgent="true" locEndLn="20" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="20" sev="4" locRef="8" tool="c++test" lineHash="-11290670" revComm="" unbViolId="fe89e2e2-3f2a-322b-8ad1-7e21304d2336" locType="sr" hash="1586671268"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="26" locFile="/ATMproject/include/ATM.hxx" auth="zak" rule="MISRACPP2023-6_9_2-a" lnHash="564928550" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" revTime="0" lang="cpp" violId="ec32daa4-d0a3-36ab-8f58-51613338b160" locEndPos="26" urgent="true" locEndLn="26" goals="1," rev="1221bc0b59ebc2873ef36dba98bc5061b1fa258f" locStartln="26" sev="4" locRef="8" tool="c++test" lineHash="564928550" revComm="" unbViolId="b2db1280-7c61-3a06-9d4d-3a190a5e5b67" locType="sr" hash="1586671268"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="1" total="53">
            <Project id="ATMproject" name="ATMproject" supp="1" total="53">
               <Res name="src" supp="1" total="27">
                  <Res loc="/ATMproject/src/Account.cxx" locRef="1" locType="sr" name="Account.cxx" supp="1" total="6"/>
                  <Res loc="/ATMproject/src/ATM.cxx" locRef="2" locType="sr" name="ATM.cxx" supp="0" total="7"/>
                  <Res loc="/ATMproject/src/Bank.cxx" locRef="3" locType="sr" name="Bank.cxx" supp="0" total="11"/>
                  <Res loc="/ATMproject/src/BaseDisplay.cxx" locRef="4" locType="sr" name="BaseDisplay.cxx" supp="0" total="3"/>
               </Res>
               <Res name="include" supp="0" total="26">
                  <Res loc="/ATMproject/include/BaseDisplay.hxx" locRef="5" locType="sr" name="BaseDisplay.hxx" supp="0" total="5"/>
                  <Res loc="/ATMproject/include/Account.hxx" locRef="6" locType="sr" name="Account.hxx" supp="0" total="8"/>
                  <Res loc="/ATMproject/include/Bank.hxx" locRef="7" locType="sr" name="Bank.hxx" supp="0" total="7"/>
                  <Res loc="/ATMproject/include/ATM.hxx" locRef="8" locType="sr" name="ATM.hxx" supp="0" total="6"/>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>