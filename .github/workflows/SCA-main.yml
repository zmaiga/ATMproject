
# This is a basic workflow to help you get started with the Run C/C++test action for a CMake-based project.
name: C/C++test SA - push main

on:
  # Triggers the workflow on push to main
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test 

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      pages: write
      id-token: write

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    - name: Set build id
      shell: bash
      working-directory: ${{github.workspace}}
      run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 
    
    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v4

    # Configures your CMake project. Be sure the compile_commands.json file is created.
    - name: Configure project
      run: cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -S . -B build

    # Builds your CMake project. (This step is optional, as it is not required for code analysis).
    #- name: Build project (optional)
    #  run: cmake --build build

    # Runs code analysis with C/C++test.
    - name: Run SA and publish to DTP
      # Use the 'run-cpptest-action' GitHub action.
      uses: parasoft/run-cpptest-action@2.0.2
      # Optional parameters for 'run-cpptest-action'.
      with:
        # For CMake-based projects, use a compile_commands.json file as the input for analysis. 
        input: build/compile_commands.json
        # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
        # reportFormat: xml,html,custom
        # additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'
        additionalParams: -publish -exclude "**/googletest/**" -exclude "**/tests/**" -exclude "**/googlemock/**"

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
  #  - name: Upload results (SARIF)
  #    if: always()
  #    uses: github/codeql-action/upload-sarif@v3
  #    with:
  #      sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Cpptest_SA_Reports
        path: reports/*.*
